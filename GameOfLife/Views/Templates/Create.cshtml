@model GameOfLife.Models.Template

@{
    ViewBag.Title = "Create";
}

<div class="row">
    <div class="col-xs-12">
        <h1 class="pull-center">Create a Template</h1>
        <div class="sub-heading pull-center">White cells represent life, black represent death</div>
    </div>
</div>

<div class="row">
    <div class="col-sm-offset-3 col-sm-6">
        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })
    </div>
</div>

<div class="row">
    @using (Html.BeginForm())
    {
        <div class="col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-4 col-lg-offset-4">
            @Html.AntiForgeryToken()

            @Html.HiddenFor(model => model.UserId, new { @Value = ViewBag.UserId })

            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Width, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Width, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Width, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Cells, htmlAttributes: new { @class = "control-label" })
                    @Html.HiddenFor(model => model.Cells, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
        </div>

        <div id="form-next" class="col-xs-12">
            <div class="template-wrapper">
                <canvas id="write-template"></canvas>
            </div>
        </div>

        <div class="col-xs-12">
            <div class="spacer-1"></div>

            <div class="form-group pull-center">
                <input type="submit" value="Create Template" class="btn btn-success" />
            </div>
        </div>
    }
</div>

<script>
    var width = $('#Width'),
        height = $('#Height'),
        cells = $('#Cells'),
        form = $('#form-next'),
        helper = $('#cell-helper'), 
        triggered = false;

    $('#write-template').paintgame({
        mode: 'write',
        height: height,
        width: width,
        cells: cells,
        fit: 'both',
    });

    height.on('input', function () {
        toggleCells();
    });

    width.on('input', function () {
        toggleCells();
    });

    function toggleCells() 
    {
        if (width.val() > 0 && height.val() > 0) {
            if (!triggered) {
                $('html, body').animate({
                    scrollTop: $('#write-template').offset().top - 100
                }, 1000, 'swing');
                triggered = true;
            }
        }
    }
</script>